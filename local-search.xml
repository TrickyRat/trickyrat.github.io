<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Leetcode-468 Valid IP Address</title>
    <link href="/2020/08/11/Leetcode-468/"/>
    <url>/2020/08/11/Leetcode-468/</url>
    
    <content type="html"><![CDATA[<h2 id="验证ip地址valid-ip-address"><a class="markdownIt-Anchor" href="#验证ip地址valid-ip-address"></a> 验证IP地址（Valid IP Address）</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>编写一个函数来验证输入的字符串是否是有效的 IPv4 或 IPv6 地址。</p><p>IPv4 地址由十进制数和点来表示，每个地址包含4个十进制数，其范围为 0 - 255， 用<code>(&quot;.&quot;)</code>分割。比如，<code>172.16.254.1</code>；</p><p>同时，IPv4 地址内的数不会以 <code>0</code> 开头。比如，地址 <code>172.16.254.01</code> 是不合法的。</p><p>IPv6 地址由8组16进制的数字来表示，每组表示 16 比特。这些组数字通过 <code>(&quot;:&quot;)</code>分割。比如,  <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以， <code>2001:db8:85a3:0:0:8A2E:0370:7334</code>也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。</p><p>然而，我们不能因为某个组的值为 <code>0</code>，而使用一个空的组，以至于出现 <code>(::)</code> 的情况。 比如， <code>2001:0db8:85a3::8A2E:0370:7334</code> 是无效的 IPv6 地址。</p><p>同时，在 IPv6 地址中，多余的 <code>0</code> 也是不被允许的。比如， <code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> 是无效的。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><h4 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1</h4><blockquote><p>输入: “172.16.254.1”<br />输出: “IPv4”<br />解释: 这是一个有效的 IPv4 地址, 所以返回 “IPv4”。</p></blockquote><h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2</h4><blockquote><p>输入: “2001:0db8:85a3:0:0:8A2E:0370:7334”<br />输出: “IPv6”<br />解释: 这是一个有效的 IPv6 地址, 所以返回 “IPv6”。</p></blockquote><h4 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3</h4><blockquote><p>输入: “256.256.256.256”<br />输出: “Neither”<br />解释: 这个地址既不是 IPv4 也不是 IPv6 地址。</p></blockquote><h3 id="分析过程"><a class="markdownIt-Anchor" href="#分析过程"></a> 分析过程：</h3><p>看到题目，首先想到就是正则表达式，无论是IPv4还是IPv6其实都是分组后每一组的规则是相同的按照相应的规则进行匹配即可。<br />对于IPv4来说，其结构为<code>A.B.C.D</code>，由三个<code>.</code>和四个<code>0-255</code>数字组成，因此存在五种情景</p><table><thead><tr><th style="text-align:center">情景</th><th style="text-align:center">说明</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">一位，首位可以为0</td><td style="text-align:center">0-9</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">两位，首位不能为0</td><td style="text-align:center">10-99</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">三位，首位不能为0</td><td style="text-align:center">100-199</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">三位2开头</td><td style="text-align:center">200-249</td></tr><tr><td style="text-align:center">250</td><td style="text-align:center">三位25开头</td><td style="text-align:center">250-255</td></tr></tbody></table><p>这样一来正则表达式就很简单了，对于前三组为<code>([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5].){3}</code>，第四组就少一个<code>.</code>即可。</p><p>同理，对于IPv6来说，结构为<code>A:B:C:D:E:F:G:H</code>，由七组<code>:</code>和八组16进制数组成，也没有现在首位不能为0，所以IPv6的正则表达式为<code>(([0-9a-fA-F]{1,4}):)</code>，第八组少一个<code>:</code>。</p><p>C# 代码</p><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> <span class="hljs-title">ValidIPAddress</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> IP</span>)</span> &#123;        <span class="hljs-keyword">string</span> ipv4_chunk = <span class="hljs-string">"([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"</span>;        Regex ipv4Pattern = <span class="hljs-keyword">new</span> Regex(<span class="hljs-string">"^("</span> + ipv4_chunk + <span class="hljs-string">".)&#123;3&#125;"</span> + ipv4_chunk + <span class="hljs-string">"$"</span>);        <span class="hljs-keyword">string</span> ipv6_chunk = <span class="hljs-string">"([0-9a-fA-F]&#123;1,4&#125;)"</span>;        Regex ipv6Pattern = <span class="hljs-keyword">new</span> Regex(<span class="hljs-string">@"^("</span> + ipv6_chunk + <span class="hljs-string">":)&#123;7&#125;"</span> + ipv6_chunk + <span class="hljs-string">"$"</span>);        <span class="hljs-keyword">if</span>(IP.Contains(<span class="hljs-string">'.'</span>))        &#123;            <span class="hljs-keyword">return</span> ipv4Pattern.IsMatch(IP) ? <span class="hljs-string">"IPv4"</span> : <span class="hljs-string">"Neither"</span>;        &#125;        <span class="hljs-keyword">if</span>(IP.Contains(<span class="hljs-string">':'</span>))        &#123;            <span class="hljs-keyword">return</span> ipv6Pattern.IsMatch(IP) ? <span class="hljs-string">"IPv6"</span> : <span class="hljs-string">"Neither"</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Neither"</span>;    &#125;&#125;</code></pre></div><p>试一下，能跑，但是耗时140ms,打败1%的用户，emmmmmm…</p><p>换一个思路，其实验证每个组的逻辑是相同，我们完全可以不能正则表达式去匹配，而是每一组去验证即可。</p><p>C# 代码</p><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">string</span> <span class="hljs-title">ValidIPAddress</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> IP</span>)</span> &#123;        <span class="hljs-keyword">if</span> (IP.Count(c =&gt; c == <span class="hljs-string">'.'</span>) == <span class="hljs-number">3</span>)        &#123;            <span class="hljs-keyword">return</span> ValidIPv4(IP);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(IP.Count(c =&gt; c == <span class="hljs-string">':'</span>) == <span class="hljs-number">7</span>)        &#123;            <span class="hljs-keyword">return</span> ValidIPv6(IP);        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">"Neither"</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-title">ValidIPv4</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> IP</span>)</span>    &#123;        <span class="hljs-keyword">string</span>[] chunks = IP.Split(<span class="hljs-string">'.'</span>);        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> chunk <span class="hljs-keyword">in</span> chunks)        &#123;            <span class="hljs-keyword">if</span>(chunk.Length == <span class="hljs-number">0</span> || chunk.Length &gt; <span class="hljs-number">3</span>)            &#123;                <span class="hljs-keyword">return</span> <span class="hljs-string">"Neither"</span>;            &#125;            <span class="hljs-keyword">if</span> (chunk[<span class="hljs-number">0</span>] == <span class="hljs-string">'0'</span> &amp;&amp; chunk.Length != <span class="hljs-number">1</span>)            &#123;                <span class="hljs-keyword">return</span> <span class="hljs-string">"Neither"</span>;            &#125;            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> c <span class="hljs-keyword">in</span> chunk)            &#123;                <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">char</span>.IsNumber(c))                &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-string">"Neither"</span>;                &#125;            &#125;            <span class="hljs-keyword">if</span>(System.Convert.ToInt32(chunk) &gt; <span class="hljs-number">255</span>)            &#123;                <span class="hljs-keyword">return</span> <span class="hljs-string">"Neither"</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"IPv4"</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-title">ValidIPv6</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> IP</span>)</span>    &#123;        <span class="hljs-keyword">string</span>[] chunks = IP.Split(<span class="hljs-string">':'</span>);        <span class="hljs-keyword">string</span> hexDigits = <span class="hljs-string">"0123456789abcdefABCDEF"</span>;        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> chunk <span class="hljs-keyword">in</span> chunks)        &#123;            <span class="hljs-keyword">if</span> (chunk.Length == <span class="hljs-number">0</span> || chunk.Length &gt; <span class="hljs-number">4</span>)            &#123;                <span class="hljs-keyword">return</span> <span class="hljs-string">"Neither"</span>;            &#125;            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> c <span class="hljs-keyword">in</span> chunk)            &#123;                <span class="hljs-keyword">if</span>(hexDigits.IndexOf(c) == <span class="hljs-number">-1</span>)                &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-string">"Neither"</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"IPv6"</span>;    &#125;&#125;</code></pre></div><p>嗯，104ms，提升不少。其他语言大同小异，思路理解了就很简单了。</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-25 Reverse Nodes in k-Group</title>
    <link href="/2020/04/09/Leetcode-25/"/>
    <url>/2020/04/09/Leetcode-25/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。<br />k 是一个正整数，它的值小于或等于链表的长度。<br />如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><blockquote><p>给你这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br />当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5<br />当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p></blockquote><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><ul><li>你的算法只能使用常数的额外空间。</li><li>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</li></ul><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题可以拆分为两个部分</p><ul><li>考核怎么反转链表</li><li>考核怎么递归</li></ul><p>第一点反转链表，反转链表应该属于基础操作，定义三个快慢指针便可以解决。<br />如</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">ReverseKGroup</span>(<span class="hljs-params">ListNode head, <span class="hljs-keyword">int</span> k</span>)</span>&#123;    ListNode tmp = head;    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (count &lt; k)    &#123;        <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">null</span>)            <span class="hljs-keyword">return</span> head;        tmp = tmp.next;        count++;    &#125;    ListNode prev = ReverseKGroup(tmp, k);    <span class="hljs-keyword">while</span> (count-- &gt; <span class="hljs-number">0</span>)    &#123;        ListNode next = head.next;        head.next = prev;        prev = head;        head = next;    &#125;    <span class="hljs-keyword">return</span> prev;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-242 Valid Anagram</title>
    <link href="/2020/04/09/Leetcode-242/"/>
    <url>/2020/04/09/Leetcode-242/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>示例 1:</p><blockquote><p>输入: s = “anagram”, t = “nagaram”<br />输出: true</p></blockquote><p>示例 2:</p><blockquote><p>输入: s = “rat”, t = “car”<br />输出: false</p></blockquote><h2 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h2><p>异位词是指两个字符串所含相同字母的个数相同，你可以假设字符串只包含小写字母。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题其实就是在考察怎么统计字符出现的次数，我们可以使用数组或者hashmap来作为字母的容器，遍历s统计其中每个字母出现的次数，将其放到数组中存储，然后再遍历t，如果对应的有相应字母出现，便将数组中的值减一，直到最后数组中的元素应该都为零，否则便不是异位词。其实可以再优化一下，只需要一次遍历便可以将两个字符串统计完成。因为只考虑小写字母可以使用一个int[26]的数组作为容器，或者是Dictionary&lt;char, int&gt;的hashmap作为容器去统计。<br />只需整个字符串即可，所以时间复杂度O(n)；只需一个固定大小的数组，所以空间复杂度为O(1)</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">IsAnagram</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> s, <span class="hljs-keyword">string</span> t</span>)</span>&#123;    <span class="hljs-keyword">if</span>(s.Length != t.Length) <span class="hljs-comment">// 长度不相等肯定不是</span>    &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-keyword">int</span> len = s.Length;    <span class="hljs-keyword">int</span>[] alpha = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">26</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)    &#123;        alpha[s[i] - <span class="hljs-string">'a'</span>]++;  <span class="hljs-comment">// 字母出现一次便在相应的元素下加一</span>        alpha[t[i] - <span class="hljs-string">'a'</span>]--;  <span class="hljs-comment">// 字母出现一次便在相应的元素下减一</span>    &#125;    <span class="hljs-keyword">return</span> alpha.All(x =&gt; x == <span class="hljs-number">0</span>);  <span class="hljs-comment">// 判断元素是否全为零</span>&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-20 	Valid Parentheses</title>
    <link href="/2020/04/09/Leetcode-20/"/>
    <url>/2020/04/09/Leetcode-20/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ul><p>注意空字符串可被认为是有效字符串。</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>示例1：</p><blockquote><p>输入: “()”<br />输出: true</p></blockquote><p>示例2：</p><blockquote><p>输入: “()[]{}”<br />输出: true</p></blockquote><p>示例3：</p><blockquote><p>输入: “(]”<br />输出: false</p></blockquote><p>示例4：</p><blockquote><p>输入: “([)]”<br />输出: false</p></blockquote><p>示例5：</p><blockquote><p>输入: “{[]}”<br />输出: true</p></blockquote><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题主要考核怎么去匹配括号我们需要匹配的括号共三种<code>'()' '[]' '{}'</code>以及他们组合在一起的情况。如果元素是任意左括号就将其压入栈中，反之元素则为任意右括号，这个时候有几种情况</p><table><thead><tr><th style="text-align:center">情况</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">空栈</td><td style="text-align:center">栈中无元素，此时却是右括号显然是没有匹配项的</td></tr><tr><td style="text-align:center">‘)’</td><td style="text-align:center">栈顶不为’(’，给出的示例4告诉我们必须在左括号后立即有与之匹配的右括号才合法</td></tr><tr><td style="text-align:center">‘]’</td><td style="text-align:center">同’)’</td></tr><tr><td style="text-align:center">‘}’</td><td style="text-align:center">同’)’</td></tr></tbody></table><p>剩下一种便是括号匹配，此时我们就需要将栈顶元素弹出，继续判断下一个元素。最后判断一下栈中是否还剩余有元素，如果有则有括号没有匹配上。<br /> 只需遍历字符串所以时间复杂度为O(n)，需要一个栈，最坏情况需要将整个字符串放到栈中（如全是左括号）故空间复杂度也为O(n)</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsValid</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> s</span>)</span>&#123;    Stack&lt;<span class="hljs-keyword">char</span>&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;<span class="hljs-keyword">char</span>&gt;();    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">char</span> ch <span class="hljs-keyword">in</span> s)    &#123;        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'('</span> || ch == <span class="hljs-string">'['</span> || ch == <span class="hljs-string">'&#123;'</span>)        &#123;            stack.Push(ch); <span class="hljs-comment">// 压栈</span>        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-keyword">if</span>(stack.Count ==  <span class="hljs-number">0</span>) <span class="hljs-comment">// 空栈</span>            &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">')'</span> &amp;&amp; stack.Peek() != <span class="hljs-string">'('</span>) <span class="hljs-comment">// ()不匹配</span>            &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">']'</span> &amp;&amp; stack.Peek() != <span class="hljs-string">'['</span>)  <span class="hljs-comment">// []不匹配</span>            &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;            <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'&#125;'</span> &amp;&amp; stack.Peek() != <span class="hljs-string">'&#123;'</span>)  <span class="hljs-comment">// &#123;&#125;不匹配</span>            &#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;            &#125;            stack.Pop();  <span class="hljs-comment">// 匹配上了</span>        &#125;    &#125;    <span class="hljs-keyword">return</span> stack.Count == <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果栈中还有元素则代表有多余的括号没有匹配上</span>&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>为什么不使用3x3矩阵来作为变换矩阵</title>
    <link href="/2020/04/06/WhyNotApply3X3MatrixAsTransformMatrix/"/>
    <url>/2020/04/06/WhyNotApply3X3MatrixAsTransformMatrix/</url>
    
    <content type="html"><![CDATA[<h2 id="缩放scale"><a class="markdownIt-Anchor" href="#缩放scale"></a> 缩放（Scale）</h2><p> 假设有一个向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">u(x,y,z)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">u</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>（一般使用列向量来表示一个向量）。我们将缩放操作定义为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>S</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><mi>x</mi><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><mi>y</mi><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(x,y,z)=S(s_xx,s_yy,s_zz)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span></span></p><p>现在需要证明一下缩放操作是一种线性变换。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>v</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><mo stretchy="false">(</mo><msub><mi>u</mi><mi>x</mi></msub><mo>+</mo><msub><mi>v</mi><mi>x</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><mo stretchy="false">(</mo><msub><mi>u</mi><mi>y</mi></msub><mo>+</mo><msub><mi>v</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><mo stretchy="false">(</mo><msub><mi>u</mi><mi>z</mi></msub><mo>+</mo><msub><mi>v</mi><mi>z</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>u</mi><mi>x</mi></msub><mo>+</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>v</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>u</mi><mi>y</mi></msub><mo>+</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>v</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>u</mi><mi>z</mi></msub><mo>+</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>v</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>u</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>u</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>u</mi><mi>z</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>v</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>v</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>v</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>S</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo>+</mo><mi>S</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}S(u+v)&amp; = (s_x(u_x+v_x),s_y(u_y+v_y),s_z(u_z+v_z))        \\&amp; = (s_xu_x+s_xv_x,s_yu_y+s_yv_y,s_zu_z+s_zv_z)     \\&amp; = (s_xu_x,s_yu_y,s_zu_z) + (s_xv_x,s_yv_y,s_zv_z) \\&amp; = S(u)+S(v)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>k</mi><mi>u</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><mi>k</mi><msub><mi>u</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><mi>k</mi><msub><mi>u</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><mi>k</mi><msub><mi>u</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>k</mi><mi>S</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}S(ku)&amp; = (s_xku_x,s_yku_y,s_zku_z) \\&amp; = kS(u)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>有以上推导可知，缩放变换是一种线性变换。<br /> 我们可以将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>拆分成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">u_x(x,0,0)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mn>0</mn><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">u_y(0,y,0)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1274389999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>z</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">u_z(0,0,z)^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>。那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><msub><mi>u</mi><mi>x</mi></msub><mo>+</mo><msub><mi>u</mi><mi>y</mi></msub><mo>+</mo><msub><mi>u</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">u=u_x+u_y+u_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，我们对三个基坐标进行缩放也就是三个分量分别进行放大或缩小，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>x</mi></msub><msub><mi>s</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">u_xs_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>y</mi></msub><msub><mi>s</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">u_ys_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>z</mi></msub><msub><mi>s</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">u_zs_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，便可以得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><msub><mi>s</mi><mi>x</mi></msub><msub><mi>u</mi><mi>x</mi></msub><mo>+</mo><msub><mi>s</mi><mi>y</mi></msub><msub><mi>u</mi><mi>y</mi></msub><mo>+</mo><msub><mi>s</mi><mi>z</mi></msub><msub><mi>u</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">u=s_xu_x+s_yu_y+s_zu_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，将三个分量的向量组合成一个矩阵，便可以得到</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>s</mi><mi>x</mi></msub><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>s</mi><mi>y</mi></msub><mi>y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>s</mi><mi>z</mi></msub><mi>z</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left[    \begin{array}{ccc}    s_x &amp; 0   &amp; 0 \\    0   &amp; s_y &amp; 0 \\    0   &amp; 0   &amp; s_z    \end{array}\right] \left[    \begin{array}{c}    x \\    y \\    z    \end{array}\right] = \left[    \begin{array}{c}    s_xx \\    s_yy \\    s_zz    \end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以缩放变换对应的矩阵是</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">M_{scale} = \left[    \begin{array}{ccc}    s_x &amp; 0   &amp; 0 \\    0   &amp; s_y &amp; 0 \\    0   &amp; 0   &amp; s_z    \end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">s_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">s_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">s_z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>分别对应三个基方向的缩放比例。</p><h2 id="旋转rotation"><a class="markdownIt-Anchor" href="#旋转rotation"></a> 旋转（Rotation）</h2><p> 同样的我们需要证明旋转是一种线性变换。</p>]]></content>
    
    
    <categories>
      
      <category>DirectX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Asp.Net Core 模型绑定</title>
    <link href="/2020/04/06/AspNetCoreModelBinding/"/>
    <url>/2020/04/06/AspNetCoreModelBinding/</url>
    
    <content type="html"><![CDATA[<h2 id="模型绑定到底用来做什么的"><a class="markdownIt-Anchor" href="#模型绑定到底用来做什么的"></a> 模型绑定到底用来做什么的</h2><p>简而言之，就是消费者和服务提供者沟通的中间载体。以<code>Web Api</code>为例，就是当Api消费者发送http请求数据时，与Controller交互时的一种数据载体，<code>Asp.Net Core</code>中是将请求的数据转换承一个键值对的数据结构存起来。根据键名称去和<code>Asp.Net Core</code>中的Model进行匹配并赋值。</p><h2 id="aspnet中数据的流向"><a class="markdownIt-Anchor" href="#aspnet中数据的流向"></a> Asp.Net中数据的流向</h2><p>读取数据：数据库 =&gt; ORM框架 =&gt; Controller =&gt; Pages/Api<br />写入数据：Api/Pages =&gt; Controller =&gt; ORM框架 =&gt;数据库</p><h2 id="页面和controller怎么进行数据交互"><a class="markdownIt-Anchor" href="#页面和controller怎么进行数据交互"></a> 页面和Controller怎么进行数据交互</h2><p>接口消费者（可能是页面或者web api）通过http请求（http request）将请求的参数传递给<code>Asp.Net Core</code>框架，然后框架通过请求管道将请求参数处理为相应的模型，然后根据处理好的参数模型以及路由，决定访问哪一个Controller数据库数据与接口消费者需求的数据可能存在一些敏感数据（如，密码等）我们一般会在模型中再加一层ViewModel或者Dto。这样就可以方便地控制返回给接口消费者的数据。</p><h2 id="控制器请求参数来源"><a class="markdownIt-Anchor" href="#控制器请求参数来源"></a> 控制器请求参数来源</h2><table><thead><tr><th style="text-align:center">来源Attribute</th><th style="text-align:center">来源说明</th><th style="text-align:center">示例</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>[FromQuery]</code></td><td style="text-align:center">从查询字符串获取值。</td><td style="text-align:center"><code>https://test.com/employees?name='trickyrat'&amp;age='12'</code></td><td style="text-align:center">框架会访问employees接口，并且传递name和age到后台模型的两个属性上</td></tr><tr><td style="text-align:center"><code>[FromRoute]</code></td><td style="text-align:center">从路由数据中获取值。</td><td style="text-align:center"><code>https://test.com/employees/{employeesid}</code></td><td style="text-align:center">获取路由中提供的数据</td></tr><tr><td style="text-align:center"><code>[FromForm]</code></td><td style="text-align:center">从已发布的表单字段中获取值。</td><td style="text-align:center"><code>https://test.com/employees</code></td><td style="text-align:center">获取提交的表单中的数据</td></tr><tr><td style="text-align:center"><code>[FromBody]</code></td><td style="text-align:center">从请求正文中获取值。</td><td style="text-align:center"><code>https://test.com/employees</code></td><td style="text-align:center">获取http请求body中提供的数据</td></tr><tr><td style="text-align:center"><code>[FromHeader]</code></td><td style="text-align:center">从 HTTP 标头中获取值。</td><td style="text-align:center"><code>https://test.com/employees</code></td><td style="text-align:center">获取http请求的header里面的数据</td></tr></tbody></table><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromQuery]HelloRequest request</span>)</span>&#123;    ...&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromRoute]HelloRequest request</span>)</span>&#123;    ...&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromForm]HelloRequest request</span>)</span>&#123;    ...&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromBody]HelloRequest request</span>)</span>&#123;    ...&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Hello</span>(<span class="hljs-params">[FromHeader]HelloRequest request</span>)</span>&#123;    ...&#125;</code></pre></div><p>这些Attribute也可以用于修饰Model中的属性，意思也很明了就是说这个属性只能通过特定传参方式传递数据。</p><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;    [<span class="hljs-meta">FromQuery</span>]    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>;&#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">PersonController</span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">GetPerson</span>(<span class="hljs-params">[FromBody]Request request</span>)</span>    &#123;        ...    &#125;&#125;</code></pre></div><p>此示例中的Age会忽略参数中<code>[FromBody]</code>Attribute，Age只能通过Query字符串中获取数据。</p><p><code>Asp.Net Core</code>也提供自定义数据来源，只需要实现<code>IValueProvider</code>和<code>IValueProviderFactory</code>两个接口的类，并且在startup中通过依赖注入注入便可以实现。<br />控制器中求情参数可以是简单的内置类型，也可以是自定义的类型。一般简单的接口，只需要几个简单的参数就可以满足，当需求复杂后，便可以自定义一个类型来作为请求参数的载体。</p>]]></content>
    
    
    <categories>
      
      <category>Asp.NetCore</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DirectX12 3D（二）</title>
    <link href="/2020/03/28/DirectX123D-02/"/>
    <url>/2020/03/28/DirectX123D-02/</url>
    
    <content type="html"><![CDATA[<h2 id="directx-12的初始化"><a class="markdownIt-Anchor" href="#directx-12的初始化"></a> DirectX 12的初始化</h2><p>DirectX 12的初始化过程<code>ID3d12CommandList</code></p>]]></content>
    
    
    <categories>
      
      <category>DirectX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DirectX12 3D（一）</title>
    <link href="/2020/03/27/DirectX123D-01/"/>
    <url>/2020/03/27/DirectX123D-01/</url>
    
    <content type="html"><![CDATA[<h2 id="系列介绍"><a class="markdownIt-Anchor" href="#系列介绍"></a> 系列介绍</h2><p> 最近在阅读<a href="https://book.douban.com/subject/30426701/" target="_blank" rel="noopener">《DirectX 12 3D游戏开发实战》</a>这本书，也就是<a href="https://book.douban.com/subject/26628210/" target="_blank" rel="noopener">《Introduction to 3D Game Programming with DirectX 12》</a>的国内翻译版本，然后决定写一个DirectX知识点系列。该系列主要讲基于DirectX12制作3D游戏，内容大概是从基础的3D数学讲起,然后递进直到做出一个游戏demo，并运用上书籍上所有知识点。</p><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p> 该书前三章主要介绍了3d数学的基础，向量、矩阵和变换三个要点以及在3d运算中扮演的角色。</p><h3 id="向量"><a class="markdownIt-Anchor" href="#向量"></a> 向量</h3><p> 向量（<a href="https://en.wikipedia.org/wiki/Euclidean_vector" target="_blank" rel="noopener">vector</a>）就是一种带有大小（模，<a href="https://en.wikipedia.org/wiki/Magnitude_(mathematics)" target="_blank" rel="noopener">magnitude</a>）和方向（direction）的量。如，物理上常见的力。</p><h3 id="矩阵"><a class="markdownIt-Anchor" href="#矩阵"></a> 矩阵</h3><p> 矩阵（<a href="https://en.wikipedia.org/wiki/Matrix_(mathematics)" target="_blank" rel="noopener">matrix</a>），一个m×n的矩阵是由m行n列的实数所构建的矩形阵列。右图便是一个矩阵：  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[    \begin{matrix}    1 &amp; 2 &amp; 3 \\    4 &amp; 5 &amp; 6 \\    7 &amp; 8 &amp; 9    \end{matrix}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span><br /> 矩阵的几何意义就是将某个数据从A坐标系转换到B坐标系，在3d中应用便是将向量在不同的空间转换。</p><h3 id="线性变换"><a class="markdownIt-Anchor" href="#线性变换"></a> 线性变换</h3><p> 线性变换（linear transformation）：数学上如果函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi><mo stretchy="false">(</mo><mi>ν</mi><mo stretchy="false">)</mo><mo>=</mo><mi>τ</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>τ</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi>z</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\tau(\nu) = \tau(x, y, z) = \tau(x&#x27;, y&#x27;, z&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.06366em;">ν</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，此函数的输入和输出都是3D向量，当且仅当此函数满足</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>τ</mi><mo stretchy="false">(</mo><mi>u</mi><mo>+</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><mi>τ</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo><mo>+</mo><mi>τ</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>τ</mi><mo stretchy="false">(</mo><mi>k</mi><mi>u</mi><mo stretchy="false">)</mo><mo>=</mo><mi>k</mi><mi>τ</mi><mo stretchy="false">(</mo><mi>u</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}\tau(u + v) = \tau(u) + \tau(v) \\\tau(ku) = k\tau(u)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>则称<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>τ</mi></mrow><annotation encoding="application/x-tex">\tau</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span>为v的线性变换。其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>u</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>u</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>u</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">u = (u_x, u_y, u_z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>v</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>z</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v = (v_x, v_y, v_z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是任意的3D向量，k为标量。</p><p>线性变换主要靠矩阵来实现，如<code>ObjectToWorldMatrix</code>便是将对象从对象空间转换到世界空间。DirectX12中矩阵<code>XMMATRIX</code>使用齐次坐标，即4x4。<a href="https://trickrat.github.io/2020/04/06/WhyNotApply3X3MatrixAsTransformMatrix/" target="_blank" rel="noopener">为什么不使用3x3的矩阵呢？</a></p><h2 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h2><ul><li><a href="https://book.douban.com/subject/26628210/" target="_blank" rel="noopener">Introduction to 3D Game Programming with DirectX 12, Frank D.Luna</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>DirectX</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-03 Longest Substring Without Repeating Characters</title>
    <link href="/2019/11/22/Leetcode-03/"/>
    <url>/2019/11/22/Leetcode-03/</url>
    
    <content type="html"><![CDATA[<h2 id="无重复字符的最长子串longest-substring-without-repeating-characters"><a class="markdownIt-Anchor" href="#无重复字符的最长子串longest-substring-without-repeating-characters"></a> 无重复字符的最长子串（Longest Substring Without Repeating Characters）</h2><h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2><h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><h4 id="示例-1"><a class="markdownIt-Anchor" href="#示例-1"></a> 示例 1:</h4><blockquote><p>输入: “abcabcbb”<br />输出: 3<br />解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例 2:</h4><blockquote><p>输入: “bbbbb”<br />输出: 1<br />解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p></blockquote><h4 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例 3:</h4><blockquote><p>输入: “pwwkew”<br />输出: 3<br />解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。</p></blockquote><p>请注意，你的答案必须是 子串 的长度，“pwke” 是一个子序列，不是子串。</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>我们可以维护一个范围[i, j)的窗口来保存子串，使用HashSet/HashMap作为容器，对s进行遍历。如果窗口中不包含有s[j]，则将s[j]添加到窗口中并计数，反之，将s[i]从窗口中移除。也可以使用一个int数组来代替HashSet。</p><table><thead><tr><th style="text-align:center">数组</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">int [26]</td><td style="text-align:center">‘A’-‘Z’和’a’-‘z’</td></tr><tr><td style="text-align:center">int [128]</td><td style="text-align:center">ASCII码</td></tr><tr><td style="text-align:center">int [256]</td><td style="text-align:center">ASCII扩展码</td></tr></tbody></table><p>时间复杂度为O(n)，遍历一次s，n为s的长度；<br />空间复杂度为O(min(m,n))，需要额外的HashSet，取决于s的长度n和窗口长度m。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">LongestSubstringWithoutRepeating</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> s</span>)</span>    &#123;        <span class="hljs-comment">// 96 ms int[]</span>        <span class="hljs-comment">// int n = s.Length, ans = 0;</span>        <span class="hljs-comment">// int[] index = new int[128]; // new int[256];</span>        <span class="hljs-comment">// for (int j = 0, i = 0; j &lt; n; j++)</span>        <span class="hljs-comment">// &#123;</span>        <span class="hljs-comment">//     i = Math.Max(index[s[j]], i);</span>        <span class="hljs-comment">//     ans = Math.Max(ans, j - i + 1);</span>        <span class="hljs-comment">//     index[s[j]] = j + 1;</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// return ans;</span>        <span class="hljs-comment">// 100 ms HashSet&lt;char&gt;</span>        <span class="hljs-comment">// int len = s.Length;</span>        <span class="hljs-comment">// HashSet&lt;char&gt; set = new HashSet&lt;char&gt;();</span>        <span class="hljs-comment">// int ans = 0, i = 0, j = 0;</span>        <span class="hljs-comment">// while (i &lt; len &amp;&amp; j &lt; len)</span>        <span class="hljs-comment">// &#123;</span>        <span class="hljs-comment">//     if (!set.Contains(s[j]))</span>        <span class="hljs-comment">//     &#123;</span>        <span class="hljs-comment">//         set.Add(s[j++]);</span>        <span class="hljs-comment">//         ans = Math.Max(ans, j - i);</span>        <span class="hljs-comment">//     &#125;</span>        <span class="hljs-comment">//     else set.Remove(s[i++]);</span>        <span class="hljs-comment">// &#125;</span>        <span class="hljs-comment">// return ans;</span>        <span class="hljs-comment">// 100ms Dictionary&lt;char, int&gt;</span>        <span class="hljs-keyword">int</span> n = s.Length, ans = <span class="hljs-number">0</span>;        Dictionary&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; dic = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>; j &lt; n; j++)        &#123;            <span class="hljs-keyword">if</span> (dic.ContainsKey(s[j]))            &#123;                i = Math.Max(dic[s[j]], i);                dic[s[j]] = j + <span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">else</span> dic.Add(s[j], j + <span class="hljs-number">1</span>);            ans = Math.Max(ans, j - i + <span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">return</span> ans;    &#125;&#125;</code></pre></div><p>C++代码</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> s)</span> </span>&#123;        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; dic(<span class="hljs-number">256</span>, <span class="hljs-number">-1</span>);        <span class="hljs-keyword">int</span> maxlen = <span class="hljs-number">0</span>, start = <span class="hljs-number">-1</span>;        <span class="hljs-keyword">int</span> len = s.length();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != len; i++) &#123;            <span class="hljs-keyword">if</span> (dic[s[i]] &gt; start)                start = dic[s[i]];            dic[s[i]] = i;            maxlen = <span class="hljs-built_in">std</span>::max(maxlen, i - start);        &#125;        <span class="hljs-keyword">return</span> maxlen;    &#125;&#125;</code></pre></div><p>Python代码</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(self, s: str)</span> -&gt; int:</span>        size = len(s)        ans = i = <span class="hljs-number">0</span>        index = [<span class="hljs-number">0</span>] * <span class="hljs-number">128</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, size):            i = max(index[ord(s[j])], i)            ans = max(ans, j - i + <span class="hljs-number">1</span>)            index[ord(s[j])] = j + <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> ans</code></pre></div><p>Typescript代码</p><div class="hljs"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lengthOfLongestSubstring</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">number</span> </span>&#123;    <span class="hljs-keyword">let</span> len: <span class="hljs-built_in">number</span> = s.length, ans:<span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;    <span class="hljs-keyword">let</span> index:<span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">128</span>).fill(<span class="hljs-number">0</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, j=<span class="hljs-number">0</span>; j &lt; len; j++) &#123;        i = <span class="hljs-built_in">Math</span>.max(index[s[j].charCodeAt(<span class="hljs-number">0</span>)], i);        ans = <span class="hljs-built_in">Math</span>.max(ans, j - i + <span class="hljs-number">1</span>);        index[s[j].charCodeAt(<span class="hljs-number">0</span>)] = j + <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> ans;&#125;;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-02 Add Two Numbers</title>
    <link href="/2019/11/21/Leetcode-02/"/>
    <url>/2019/11/21/Leetcode-02/</url>
    
    <content type="html"><![CDATA[<h2 id="两数相加add-two-numbers"><a class="markdownIt-Anchor" href="#两数相加add-two-numbers"></a> 两数相加（Add Two Numbers）</h2><h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3><p>给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。<br />如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br />输出：7 -&gt; 0 -&gt; 8<br />原因：342 + 465 = 807</p></blockquote><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><p>其实和我们算加法一样，从个位开始计算就行了,如图所示<br /><img src="/img/bg/Leetcode-02/figure1.png" srcset="/img/loading.gif" alt="figure1" /><br />只要把两条链表相应位置相加，记录是否有进位(通过sum/10来判断)，有则进位，添加到一条新的链表结点就行了。值得注意的是，相加后有几种情景，分别是</p><table><thead><tr><th style="text-align:center">情景</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">1+1</td><td style="text-align:center">不进位</td></tr><tr><td style="text-align:center">12+8</td><td style="text-align:center">进一次位</td></tr><tr><td style="text-align:center">9993+7</td><td style="text-align:center">连续进位</td></tr><tr><td style="text-align:center">0+12</td><td style="text-align:center">有空的结点</td></tr></tbody></table><p>对应结点的和sum = x + y + carry，carry则是sum/10，对应的该位结点值为sum%10。</p><p>因为只需要遍历最长的链表，挨个结点相加，所以时间复杂度为O(max(m,n))，m和n分别是两条链表的长度；<br />需要新的一条链表来记录结果，最多为max(m,n)+1(最高位有进位情况)，所以空间复杂度为O(max(m,n))。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><p>C#代码</p><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">AddTwoNumbers</span>(<span class="hljs-params">ListNode l1, ListNode l2</span>)</span>    &#123;        ListNode dummyHead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span> &amp;&amp; l2 == <span class="hljs-literal">null</span>)            <span class="hljs-keyword">return</span> dummyHead;        <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;        ListNode curr = dummyHead;        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>)        &#123;            <span class="hljs-keyword">int</span> num1 = l1?.val ?? <span class="hljs-number">0</span>;            <span class="hljs-keyword">int</span> num2 = l2?.val ?? <span class="hljs-number">0</span>;            <span class="hljs-keyword">int</span> sum = num1 + num2 + carry;            curr.next = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>);            curr = curr.next;            carry = sum / <span class="hljs-number">10</span>;            l1 = l1?.next;            l2 = l2?.next;        &#125;        <span class="hljs-keyword">if</span> (carry != <span class="hljs-number">0</span>)        &#123;            curr.next = <span class="hljs-keyword">new</span> ListNode(carry);        &#125;        <span class="hljs-keyword">return</span> dummyHead.next;    &#125;&#125;</code></pre></div><p>C++代码</p><div class="hljs"><pre><code class="hljs cpp">class Solution &#123;public:    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;        ListNode preHead(0), *p = &amp;preHead;        int carry = 0;        while (l1 || l2 || carry) &#123;            int sum = (l1 ? l1-&gt;val : 0) + (l2 ? l2-&gt;val : 0) + carry;            carry = sum / 10;            p-&gt;next = new ListNode(sum % 10);            p = p-&gt;next;            l1 = l1 ? l1-&gt;next : l1;            l2 = l2 ? l2-&gt;next : l2;        &#125;        return preHead.next;    &#125;&#125;;</code></pre></div><p>Python代码</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span>        carry = <span class="hljs-number">0</span>        dummy_head = ListNode(<span class="hljs-literal">None</span>)        curr = dummy_head        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">or</span> l2:            sum = <span class="hljs-number">0</span>;            <span class="hljs-keyword">if</span> l1:                sum += l1.val                l1 = l1.next            <span class="hljs-keyword">if</span> l2:                sum += l2.val                l2 = l2.next            sum +=  carry            curr.next = ListNode(sum%<span class="hljs-number">10</span>)            curr = curr.next            carry = sum//<span class="hljs-number">10</span>                   <span class="hljs-keyword">if</span> carry != <span class="hljs-number">0</span>:            curr.next = ListNode(carry)        <span class="hljs-keyword">return</span> dummy_head.next</code></pre></div><p>Typescript 代码</p><div class="hljs"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTwoNumbers</span>(<span class="hljs-params">l1: ListNode | <span class="hljs-literal">null</span>, l2: ListNode | <span class="hljs-literal">null</span></span>): <span class="hljs-title">ListNode</span> | <span class="hljs-title">null</span> </span>&#123;    <span class="hljs-keyword">let</span> dummyHead: ListNode | <span class="hljs-literal">null</span> = <span class="hljs-keyword">new</span> ListNode();    <span class="hljs-keyword">let</span> carry: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;    <span class="hljs-keyword">let</span> curr: ListNode | <span class="hljs-literal">null</span> = dummyHead;    <span class="hljs-keyword">while</span> (l1 || l2) &#123;        <span class="hljs-keyword">let</span> sum: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span> (l1) &#123;            sum += l1.val;            l1 = l1.next;        &#125;        <span class="hljs-keyword">if</span> (l2) &#123;            sum += l2.val;            l2 = l2.next;        &#125;        sum += carry;        curr.next = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>);        curr = curr.next        carry = <span class="hljs-built_in">Math</span>.floor(sum / <span class="hljs-number">10</span>);    &#125;    <span class="hljs-keyword">if</span> (carry != <span class="hljs-number">0</span>) &#123;        curr.next = <span class="hljs-keyword">new</span> ListNode(carry);    &#125;    <span class="hljs-keyword">return</span> dummyHead.next;&#125;;</code></pre></div><h2 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h2><p>截图来自<a href="https://leetcode-cn.com/add-two-numbers" target="_blank" rel="noopener">Leetcode-cn</a>.</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode-01 Two Sum</title>
    <link href="/2019/11/20/Leetcode-01/"/>
    <url>/2019/11/20/Leetcode-01/</url>
    
    <content type="html"><![CDATA[<h2 id="两数之和two-sum"><a class="markdownIt-Anchor" href="#两数之和two-sum"></a> 两数之和（Two Sum）</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数，<br />你可以假设每个输入只对应一个答案，且同样的元素不能被重复利用。</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><blockquote><p>给定数组 nums = [2, 7, 11, 15], target = 9，<br />因为 nums[0] + nums[1] = 2 + 7 =9，<br />所以返回结果 [0, 1]。</p></blockquote><h3 id="分析过程"><a class="markdownIt-Anchor" href="#分析过程"></a> 分析过程：</h3><p>初看题目，首先想到两次循环暴力匹配。遍历数组nums查找是否有满足target-nums[i]的元素。显然时间复杂度为O(n^2)，空间复杂度为O(1)。​</p><p>C# 代码</p><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] <span class="hljs-title">TwoSum</span>(<span class="hljs-params"><span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target</span>)</span>    &#123;           <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];        <span class="hljs-keyword">int</span> len = nums.Length;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)        &#123;            <span class="hljs-keyword">int</span> numberToFind = target - nums[i];            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++)            &#123;                <span class="hljs-keyword">if</span>(nums[j] == numberToFind)                &#123;                    res[<span class="hljs-number">0</span>] = i;                    res[<span class="hljs-number">1</span>] = j;                    <span class="hljs-keyword">return</span> res;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre></div><p>其实细想，我们只需要遍历一次数组，将然后根据target-nums[i]为key在HashTable中查找是否有与之匹配的value，如果有则说明找到了目标，并将当前索引和hashtable中的value返回；没有则将当前值作为key，当前索引作为value存入hashtable中。<br />因为hashtable的查询平均时间复杂度为O(1)，所以我们的算法时间复杂度从O(n^2)降到O(n),因为引入了一个hashtable，并且最坏情况需要将整个数组的数据放入，所以空降复杂度为O(n)。</p><p>C# 代码</p><div class="hljs"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] <span class="hljs-title">TwoSum</span>(<span class="hljs-params"><span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target</span>)</span>    &#123;        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];        Dictionary&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; dict = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.Length; i++)        &#123;            <span class="hljs-keyword">if</span>(dic.TryGetValue(target - nums[i], <span class="hljs-keyword">out</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">value</span>)) <span class="hljs-comment">// O(1) </span>            &#123;              res[<span class="hljs-number">1</span>] = i;              res[<span class="hljs-number">0</span>] = <span class="hljs-keyword">value</span>;              <span class="hljs-keyword">break</span>;            &#125;            <span class="hljs-keyword">if</span> (!dic.ContainsKey(nums[i])) <span class="hljs-comment">// O(1)</span>            &#123;                    dic.Add(nums[i], i);            &#125;        &#125;               <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre></div><p>C++ 代码</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; twoSum(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target) &#123;        <span class="hljs-keyword">int</span> size = nums.size();        <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; hash;        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;            <span class="hljs-keyword">int</span> numberToFind = target - nums[i];            <span class="hljs-keyword">if</span> (hash.contains(numberToFind)) &#123;                result.push_back(hash[numberToFind]);                result.push_back(i);                <span class="hljs-keyword">return</span> result;            &#125;            hash[nums[i]] = i;        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;;</code></pre></div><p>Python 代码</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(self, nums, target)</span>:</span>        <span class="hljs-string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        <span class="hljs-keyword">if</span> len(nums) &lt;= <span class="hljs-number">1</span>:            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        buff_dict = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(nums)):            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-keyword">in</span> buff_dict:                <span class="hljs-keyword">return</span> [buff_dict[nums[i]], i]            <span class="hljs-keyword">else</span>:                buff_dict[target - nums[i]] = i</code></pre></div><p>Rust 代码</p><div class="hljs"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<span class="hljs-keyword">impl</span> Solution &#123;    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">two_sum</span></span>(nums: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt;, target: <span class="hljs-built_in">i32</span>) -&gt; <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; &#123;        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> hash = HashMap::new();        <span class="hljs-keyword">for</span> (index, value) <span class="hljs-keyword">in</span> nums.iter().enumerate() &#123;            <span class="hljs-keyword">let</span> number_to_find = target - *value;            <span class="hljs-keyword">if</span> hash.contains_key(&amp;number_to_find) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec!</span>[hash[&amp;number_to_find], index <span class="hljs-keyword">as</span> <span class="hljs-built_in">i32</span>];            &#125;            hash.insert(value, index <span class="hljs-keyword">as</span> <span class="hljs-built_in">i32</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vec!</span>[];    &#125;&#125;</code></pre></div><p>Javascript 代码</p><div class="hljs"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) </span>&#123;    <span class="hljs-keyword">var</span> hash = &#123;&#125;;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;        <span class="hljs-keyword">let</span> index = hash[target - nums[i]];        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> index !== <span class="hljs-string">'undefined'</span>) &#123;            <span class="hljs-keyword">return</span> [index, i];        &#125;        hash[nums[i]] = i;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;;</code></pre></div><p>Typescript 代码</p><div class="hljs"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params">nums: <span class="hljs-built_in">number</span>[], target: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span>[] </span>&#123;    <span class="hljs-keyword">let</span> res: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>];    <span class="hljs-keyword">let</span> dic: Map&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">number</span>&gt; = <span class="hljs-keyword">new</span> Map&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">number</span>&gt;();    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;        <span class="hljs-keyword">if</span>(dic.has(target - nums[i])) &#123;            res[<span class="hljs-number">0</span>] = dic.get(target - nums[i]) <span class="hljs-keyword">as</span> <span class="hljs-built_in">number</span>;            res[<span class="hljs-number">1</span>] = i;            <span class="hljs-keyword">return</span> res;        &#125; <span class="hljs-keyword">else</span> &#123;            dic.set(nums[i], i);        &#125;    &#125;    <span class="hljs-keyword">return</span> [];&#125;;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
